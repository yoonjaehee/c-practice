call-by-value : 값을 인자로 전달하는 함수의 호출형식 
call-by-reference(call-by-address) : 주소 값을 전달받아서, 함수 외부에 선언된 변수에 접근하는 형태의 함수호출
1.주소 값을 이용한 call-by-reference
2.참조자를 이용한 call-by-reference

malloc&free 메모리관련 : 1.데이터 : 전역변수가 저장되는 영역
                         2.스택 : 지역변수 및 매개변수가 저장되는 영역
                         3.힙 : malloc 함수호출에 의해 프로그램이 실행되는 과정에서 동적으로 할당이 이루어지는 영역
                         4.malloc&free : malloc 함수호출에 의해 할당된 메로리 공간은 free 함수호출을 통해서 소멸하지 않으면 해제되지 않는다.

오버로딩 : 함수호출 시 동일한 이름의 함수정의 but 매개변수의 선언형태가 다름. ex)int, char등의 구분

매개변수의 디폴트 값 : 함수호출 시 인잘르 전달하지 않으면 설정한 값이 전달된 것으로 간주하겠다. ex) int MyFuncTwo(int num1=5, int num2=7)

inline 함수 : 매크로 함수는 정의하기가 복잡하니, 일반 함수처럼 정의.
              단점 : 매크로 함수는 변환이 이뤄져서 어떠한 경우에도 데이터 손실이 발생하지 않지만, inline 함수는 데이터 손실 발생할 수 있음.
              장점 : 1.매크로 함수는 정의하기가 복잡하니, 일반 함수처럼 정의가 가능.
                     2.매크로 함수처럼 실행속도의 이점이 있음.  

namespace(이름공간) : 안의것을 표현하고 싶으면 name::oo형식으로 하면된다. 이러면 "이름공간 name에 선언된 oo"으로 된다.

참조자 : 변수에 별명을 하나 붙여주는 것. ex)int &num2= num1; 에서 num2는 num1의 별명. 
         이것을 사용할때에는 입력받은 변수를 변경할 수 있다. ex) int num=24; HappyFunc(num); cout<<num<<endl; 에서 뭐가 나올 지 모른다.


멤버변수: private
멤버함수: public

bool : true & false

const 함수 특징

1.이 함수 내에서는 멤버변수에 저장된 값을 변경하지 않겠다.
2.const 함수 내에서는 const가 아닌 함수의 호출이 제한된다.

